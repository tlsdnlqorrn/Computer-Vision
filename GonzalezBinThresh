int GonzalezBinThresh(BYTE * Img, int * Histo, int W, int H)
{
	int ImgSize = W*H;
	BYTE Low = 0, High = 0;
	int initT; //초기 임계치
	int finT; // 새로운 임계치
	int G1, G2, A; // 임계치보다 큰 화소 영역: G1, 임계치보다 작은 화소 영역: G2
	double u1, u2; // 영역 G1, G2 의 화소의 각각의 평균값

	// 밝기 최대, 최소 구해서 초기 임계치 계산
	for (int i = 0;i < 256;i++) { 
		if (Histo[i] != 0) {
			Low = i;
			break;
		}
	}
	for (int i = 255;i >= 0;i--) {
		if (Histo[i] != 0) {
			High = i;
			break;
		}
	}
	initT = (int)(Low + High) / 2.0; // 초기 임계치

	while (1) {
		G1 = 0;
		G2 = 0;
		A = 0;
		for (int i = 0;i < 256;i++) {
			if (i >= initT) {
				G1 += i*Histo[i];
				A += Histo[i];
			}
			else
				G2 += i*Histo[i];
		}
		u1 = G1 / (double)A;
		u2 = G2 / (double)(ImgSize - A);

		// 새로운 임계치 계산
		finT = (int)(u1 + u2) / 2.0;

		// 오차 계산
		if ((initT - finT) >= 3)
			initT = finT; // 초기임계치와 최종 임계치가 3이상의 차이가 나면 임계치값 없데이트 후 다시 반복.
		else
			break; //오차가 작으면 성공. 반복 종료.
	}
	return finT;
}


/* 교수님 Gonzalez */
BYTE DetermThGonzalez(int*H) // histogram이 진행된 상태이므로 화소 밝기순으로 정렬됨.
{
	BYTE ep = 3; // 오류의 기준인 입실론
	BYTE Low, High; // 영상에서 가장 밝은 화소와 어두운 화소를 저장
	BYTE Th; // 초기 임계치 저장
	BYTE NewTh; // 최종 임계치 저장
	int G1 = 0, G2 = 0, cnt1 = 0, cnt2 = 0, mu1, mu2;

	for (int i = 0;i < 256;i++) { // 순차 탐색
		if (H[i] != 0) { // H[i]가 0이 아니라면 = i번째 화소에 영상이 존재한다면
			Low = i; // 첫 화소 = 가장 어두운 화소
			break;
		}
	}
	for (int i = 255;i >=0;i--) { // 역탐색
		if (H[i] != 0) { // H[i]가 0이 아니라면 = i번째 화소에 영상이 존재한다면
			High = i; // 첫 화소 = 가장 밝은 화소
			break;
		}
	}

	Th = (Low + High) / 2; // 단순 밝기값을 이용해 초기 임계치 저장

	while (1) { // 무한 반복
		for (int i = Th + 1;i <= High;i++) { // Th 값은 G2에 포함시키기로 함.
			G1 += (H[i] * i); // G1: 임계치 ~ 가장 밝은 값까지의 영역.
			cnt1 += H[i]; // G1 영역에 해당하는 화소 수 저장.
		}
		for (int i = Low;i <= Th;i++) {
			G2 += (H[i] * i); // G2: 가장 어두운 값 ~ 임계치까지의 영역.
			cnt2 += H[i]; // G2 영역에 해당하는 화소 수 저장.
		}

		if (cnt1 == 0) cnt1 = 1; // cnt가 0일때 밑의 나눗셈에 오류가 남으로
		if (cnt2 == 0) cnt2 = 1; // 오류를 처리해준다.
		mu1 = G1 / cnt1; // G1 영역 화소들의 밝기의 평균값
		mu2 = G2 / cnt2; // G2 영역 화소들의 밝기의 평균값

		NewTh = mu1 + mu2 / 2; // 최종 임계치 저장

		if (abs(NewTh - Th) < ep) { // if 초기임계치와 최종임계치가 3 미만의 차. 즉, 오차가 작다면 반복 종료.
			Th = NewTh; // 임계치값 업데이트. 별 차이가 없어 크게 중요한건 아님.
			break;
		}
		else {
			Th = NewTh; // 오차가 3이상으로 크면 임계치 없데이트 후 재반복.
		}
		G1 = G2 = cnt1 = cnt2 = 0;
	}
	return Th;
}
